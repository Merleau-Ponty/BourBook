package app.model;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import app.database.Database;
import app.entity.AuthorEntity;
import java.sql.PreparedStatement;
import java.util.logging.Level;
import java.util.logging.Logger;

public class AuthorModel extends Model {

	public AuthorModel(Database db) {
		super(db);
		// TODO Auto-generated constructor stub
	}

	public ArrayList<AuthorEntity> lister() {
		ArrayList<AuthorEntity> list = new ArrayList();
		try {
			Statement statement = db.getConnection().createStatement();

			String req = "Select * from AUTHOR ;";

			ResultSet res = statement.executeQuery(req);

			while (res.next()) {
				list.add(new AuthorEntity(res.getInt("ID"), res.getString("NAME"), res.getString("FIRSTNAME")));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return list;
	}

	/**
	 * retourne le ou les auteurs comprenant la lettre mentionnée en paramètre
	 *
	 * @param name
	 * @return ArrayList de Book
	 */
	public ArrayList<AuthorEntity> searchName(String name) {
		ArrayList<AuthorEntity> liste = new ArrayList<AuthorEntity>();

		try {
			Statement statement = db.getConnection().createStatement();

			String req = "Select NAME, FIRSTNAME from AUTHOR  where NAME like '%" + name + "%' or FIRSTNAME like '%" + name + "%' ORDER BY NAME;";

			ResultSet res = statement.executeQuery(req);

			while (res.next()) {
				liste.add(new AuthorEntity(res.getString("FIRSTNAME"), res.getString("NAME")));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return liste;

	}

	/**
	 * Ajoute un auteur dans la base de données
	 * @param firstName
	 * @param name
	 * @return 
	 */
	public AuthorEntity createAuthor(String firstName, String name) {
		AuthorEntity newAuthor = null;
		String request = "insert into AUTHOR(NAME, FIRSTNAME) values (?,?)";
		System.out.println(request);
		try {
			PreparedStatement preparedStatement = db.getConnection().prepareStatement(request, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setString(1, name);
			preparedStatement.setString(2, firstName);
			preparedStatement.executeUpdate();
			ResultSet tableKeys = preparedStatement.getGeneratedKeys();
			tableKeys.next();
			int autoGeneratedID = tableKeys.getInt(1);
			newAuthor = new AuthorEntity(autoGeneratedID, name, firstName);
			System.out.println(newAuthor);
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return newAuthor;
	}
	
	public AuthorEntity findById(int id){
		String request = "select * from AUTHOR where id = " + id;
		try {
			Statement statement = db.getConnection().createStatement();
			ResultSet req = statement.executeQuery(request);
			if(req.next()){
				return new AuthorEntity(req.getInt("ID"), req.getString("NAME"), req.getString("FIRSTNAME"));
			}
		} catch (SQLException ex) {
			Logger.getLogger(AuthorModel.class.getName()).log(Level.SEVERE, null, ex);
		}
		return null;
	}

}
